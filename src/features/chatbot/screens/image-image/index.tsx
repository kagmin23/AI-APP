import { API_BASE_URL } from "@/config/env"; // Import t·ª´ file config thay v√¨ @env
import {
  ImageToImageScreenNavigationProp,
  RootStackParamList,
} from "@/navigations/types";
import { RouteProp } from "@react-navigation/native";
import axios from "axios";
import * as FileSystem from "expo-file-system";
import * as ImagePicker from "expo-image-picker";
import React, { useEffect, useState } from "react";
import {
  ActivityIndicator,
  Alert,
  Button,
  FlatList,
  Image,
  Text,
  View,
} from "react-native";
import styles from "./styles";

type Props = {
  navigation: ImageToImageScreenNavigationProp;
  route: RouteProp<RootStackParamList, "ImageToImage">;
};

type ImageTransformItem = {
  id: string;
  originalImage: string;
  transformedImage: string;
};

const ImageToImageScreen: React.FC<Props> = ({ navigation }) => {
  const [history, setHistory] = useState<ImageTransformItem[]>([]);
  const [loading, setLoading] = useState<boolean>(false);
  const [transforming, setTransforming] = useState<boolean>(false);

  useEffect(() => {
    fetchHistory();
  }, []);

  const fetchHistory = async () => {
    try {
      setLoading(true);
      console.log("üîÑ ƒêang t·∫£i l·ªãch s·ª≠ t·ª´:", `${API_BASE_URL}/image-to-image`);

      const response = await axios.get(`${API_BASE_URL}/image-to-image`);
      setHistory(response.data);

      console.log("‚úÖ T·∫£i l·ªãch s·ª≠ th√†nh c√¥ng:", response.data.length, "m·ª•c");
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫£i l·ªãch s·ª≠:", error);
      Alert.alert(
        "L·ªói",
        "Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng."
      );
    } finally {
      setLoading(false);
    }
  };

  const pickImage = async () => {
    try {
      // Y√™u c·∫ßu quy·ªÅn truy c·∫≠p th∆∞ vi·ªán ·∫£nh
      const { status } =
        await ImagePicker.requestMediaLibraryPermissionsAsync();
      if (status !== "granted") {
        Alert.alert(
          "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p",
          "·ª®ng d·ª•ng c·∫ßn quy·ªÅn truy c·∫≠p th∆∞ vi·ªán ·∫£nh ƒë·ªÉ ch·ªçn h√¨nh."
        );
        return;
      }

      // M·ªü th∆∞ vi·ªán ·∫£nh
      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        quality: 0.8, // Gi·∫£m ch·∫•t l∆∞·ª£ng ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô upload
        allowsEditing: true,
        aspect: [1, 1],
      });

      if (!result.canceled && result.assets[0]) {
        await handleTransform(result.assets[0].uri);
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi ch·ªçn ·∫£nh:", error);
      Alert.alert("L·ªói", "Kh√¥ng th·ªÉ ch·ªçn ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i.");
    }
  };

  const handleTransform = async (imageUri: string) => {
    try {
      setTransforming(true);
      console.log("üîÑ ƒêang chuy·ªÉn ƒë·ªïi ·∫£nh...");

      // ƒê·ªçc file ·∫£nh d∆∞·ªõi d·∫°ng base64
      const base64 = await FileSystem.readAsStringAsync(imageUri, {
        encoding: FileSystem.EncodingType.Base64,
      });

      // T·∫°o FormData ƒë·ªÉ g·ª≠i file
      const formData = new FormData();

      // T·∫°o blob t·ª´ base64
      const response = await fetch(`data:image/jpeg;base64,${base64}`);
      const blob = await response.blob();

      formData.append("image", blob as any, "image.jpg");

      console.log("üì§ ƒêang g·ª≠i y√™u c·∫ßu ƒë·∫øn:", `${API_BASE_URL}/image-to-image`);

      const apiResponse = await axios.post(
        `${API_BASE_URL}/image-to-image`,
        formData,
        {
          headers: {
            "Content-Type": "multipart/form-data",
          },
          timeout: 30000, // Timeout 30 gi√¢y
        }
      );

      console.log("‚úÖ Chuy·ªÉn ƒë·ªïi ·∫£nh th√†nh c√¥ng");

      // C·∫≠p nh·∫≠t l·ªãch s·ª≠ v·ªõi ·∫£nh m·ªõi
      const newItem: ImageTransformItem = {
        id: apiResponse.data.id,
        originalImage: imageUri,
        transformedImage: apiResponse.data.imageUrl,
      };

      setHistory((prevHistory) => [newItem, ...prevHistory]);

      Alert.alert("Th√†nh c√¥ng", "·∫¢nh ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!");
    } catch (error) {
      console.error("‚ùå L·ªói khi chuy·ªÉn ƒë·ªïi ·∫£nh:", error);
      Alert.alert(
        "L·ªói",
        "Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi ·∫£nh. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i."
      );
    } finally {
      setTransforming(false);
    }
  };

  const handleDelete = async (id: string) => {
    try {
      console.log("üóëÔ∏è ƒêang x√≥a m·ª•c:", id);

      await axios.delete(`${API_BASE_URL}/image-to-image/${id}`);
      setHistory((prevHistory) => prevHistory.filter((item) => item.id !== id));

      console.log("‚úÖ X√≥a th√†nh c√¥ng");
      Alert.alert("Th√†nh c√¥ng", "ƒê√£ x√≥a ·∫£nh kh·ªèi l·ªãch s·ª≠.");
    } catch (error) {
      console.error("‚ùå L·ªói khi x√≥a:", error);
      Alert.alert("L·ªói", "Kh√¥ng th·ªÉ x√≥a. Vui l√≤ng th·ª≠ l·∫°i.");
    }
  };

  const confirmDelete = (id: string) => {
    Alert.alert("X√°c nh·∫≠n x√≥a", "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ·∫£nh n√†y kh·ªèi l·ªãch s·ª≠?", [
      { text: "H·ªßy", style: "cancel" },
      { text: "X√≥a", style: "destructive", onPress: () => handleDelete(id) },
    ]);
  };

  return (
    <View style={styles.screen}>
      <Text style={styles.title}>Chuy·ªÉn ƒë·ªïi ·∫£nh</Text>

      <Button
        title={transforming ? "ƒêang x·ª≠ l√Ω..." : "Ch·ªçn ·∫£nh"}
        onPress={pickImage}
        color="#007AFF"
        disabled={transforming}
      />

      {transforming && (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#007AFF" />
          <Text style={styles.loadingText}>ƒêang chuy·ªÉn ƒë·ªïi ·∫£nh...</Text>
        </View>
      )}

      {loading ? (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#007AFF" />
          <Text style={styles.loadingText}>ƒêang t·∫£i l·ªãch s·ª≠...</Text>
        </View>
      ) : (
        <FlatList
          data={history}
          keyExtractor={(item) => item.id}
          renderItem={({ item }) => (
            <View style={styles.historyItem}>
              <Text style={styles.prompt}>·∫¢nh g·ªëc:</Text>
              <Image
                source={{ uri: item.originalImage }}
                style={styles.image}
              />

              <Text style={styles.prompt}>·∫¢nh ƒë√£ chuy·ªÉn ƒë·ªïi:</Text>
              {item.transformedImage ? (
                <Image
                  source={{ uri: item.transformedImage }}
                  style={styles.image}
                />
              ) : (
                <Text style={styles.noImageText}>Ch∆∞a c√≥ ·∫£nh chuy·ªÉn ƒë·ªïi</Text>
              )}

              <Button
                title="X√≥a"
                onPress={() => confirmDelete(item.id)}
                color="#FF3B30"
              />
            </View>
          )}
          style={styles.historyList}
          refreshing={loading}
          onRefresh={fetchHistory}
          ListEmptyComponent={
            <View style={styles.emptyContainer}>
              <Text style={styles.emptyText}>
                Ch∆∞a c√≥ ·∫£nh n√†o ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi.{"\n"}
                Nh·∫•n "Ch·ªçn ·∫£nh" ƒë·ªÉ b·∫Øt ƒë·∫ßu!
              </Text>
            </View>
          }
        />
      )}
    </View>
  );
};

export default ImageToImageScreen;
