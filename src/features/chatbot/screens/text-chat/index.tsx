import { API_BASE_URL } from '@/config/env'; // Thay ƒë·ªïi import t·ª´ @env sang @/config/env
import { RootStackParamList, TextChatScreenNavigationProp } from '@/navigations/types';
import { RouteProp } from '@react-navigation/native';
import axios from 'axios';
import React, { useEffect, useState } from 'react';
import { ActivityIndicator, Alert, Button, FlatList, KeyboardAvoidingView, Platform, Text, TextInput, View } from 'react-native';
import styles from './styles';

type Props = {
  navigation: TextChatScreenNavigationProp;
  route: RouteProp<RootStackParamList, 'TextChat'>;
};

type ChatItem = {
  id: string;
  prompt: string;
  response: string;
};

const TextChatScreen: React.FC<Props> = ({ navigation }) => {
  const [input, setInput] = useState('');
  const [history, setHistory] = useState<ChatItem[]>([]);
  const [loading, setLoading] = useState<boolean>(false);
  const [sending, setSending] = useState<boolean>(false);

  useEffect(() => {
    fetchHistory();
  }, []);

  const fetchHistory = async () => {
    try {
      setLoading(true);
      console.log('üîÑ ƒêang t·∫£i l·ªãch s·ª≠ chat t·ª´:', `${API_BASE_URL}/text-to-text`);
      
      const response = await axios.get(`${API_BASE_URL}/text-to-text`);
      setHistory(response.data);
      
      console.log('‚úÖ T·∫£i l·ªãch s·ª≠ th√†nh c√¥ng:', response.data.length, 'tin nh·∫Øn');
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫£i l·ªãch s·ª≠:', error);
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ chat. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.');
    } finally {
      setLoading(false);
    }
  };

  const handleSend = async () => {
    if (!input.trim()) {
      Alert.alert('Th√¥ng b√°o', 'Vui l√≤ng nh·∫≠p tin nh·∫Øn tr∆∞·ªõc khi g·ª≠i.');
      return;
    }

    const currentInput = input.trim();
    
    try {
      setSending(true);
      setInput(''); // X√≥a input ngay l·∫≠p t·ª©c ƒë·ªÉ UX t·ªët h∆°n
      
      console.log('üì§ ƒêang g·ª≠i tin nh·∫Øn:', currentInput);
      
      const response = await axios.post(`${API_BASE_URL}/text-to-text`, { 
        prompt: currentInput 
      }, {
        timeout: 30000, // Timeout 30 gi√¢y
      });

      console.log('‚úÖ Nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI');

      const newChatItem: ChatItem = {
        id: response.data.id,
        prompt: currentInput,
        response: response.data.result
      };

      setHistory(prevHistory => [newChatItem, ...prevHistory]);
      
    } catch (error) {
      console.error('‚ùå L·ªói khi g·ª≠i tin nh·∫Øn:', error);
      setInput(currentInput); // Kh√¥i ph·ª•c input n·∫øu c√≥ l·ªói
      Alert.alert(
        'L·ªói', 
        'Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i.'
      );
    } finally {
      setSending(false);
    }
  };

  const handleDelete = async (id: string) => {
    try {
      console.log('üóëÔ∏è ƒêang x√≥a tin nh·∫Øn:', id);
      
      await axios.delete(`${API_BASE_URL}/text-to-text/${id}`);
      setHistory(prevHistory => prevHistory.filter(item => item.id !== id));
      
      console.log('‚úÖ X√≥a tin nh·∫Øn th√†nh c√¥ng');
      Alert.alert('Th√†nh c√¥ng', 'ƒê√£ x√≥a tin nh·∫Øn kh·ªèi l·ªãch s·ª≠.');
      
    } catch (error) {
      console.error('‚ùå L·ªói khi x√≥a tin nh·∫Øn:', error);
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ x√≥a tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  const confirmDelete = (id: string) => {
    Alert.alert(
      'X√°c nh·∫≠n x√≥a',
      'B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a tin nh·∫Øn n√†y kh·ªèi l·ªãch s·ª≠?',
      [
        { text: 'H·ªßy', style: 'cancel' },
        { text: 'X√≥a', style: 'destructive', onPress: () => handleDelete(id) }
      ]
    );
  };

  return (
    <KeyboardAvoidingView 
      style={styles.screen} 
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
    >
      <Text style={styles.title}>AI Text Chat</Text>
      
      {/* Input Area */}
      <View style={styles.inputContainer}>
        <TextInput
          style={styles.input}
          value={input}
          onChangeText={setInput}
          placeholder="Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n..."
          placeholderTextColor="#999"
          multiline
          maxLength={1000}
          editable={!sending}
        />
        <Button 
          title={sending ? "ƒêang g·ª≠i..." : "G·ª≠i"} 
          onPress={handleSend} 
          color="#007AFF"
          disabled={sending || !input.trim()}
        />
      </View>

      {sending && (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="small" color="#007AFF" />
          <Text style={styles.loadingText}>AI ƒëang suy nghƒ©...</Text>
        </View>
      )}
      
      {/* Chat History */}
      {loading ? (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#007AFF" />
          <Text style={styles.loadingText}>ƒêang t·∫£i l·ªãch s·ª≠ chat...</Text>
        </View>
      ) : (
        <FlatList
          data={history}
          keyExtractor={item => item.id}
          renderItem={({ item }) => (
            <View style={styles.historyItem}>
              <View style={styles.promptContainer}>
                <Text style={styles.promptLabel}>B·∫°n:</Text>
                <Text style={styles.prompt}>{item.prompt}</Text>
              </View>
              
              <View style={styles.responseContainer}>
                <Text style={styles.responseLabel}>AI:</Text>
                <Text style={styles.response}>{item.response}</Text>
              </View>
              
              <Button 
                title="X√≥a" 
                onPress={() => confirmDelete(item.id)} 
                color="#FF3B30" 
              />
            </View>
          )}
          style={styles.historyList}
          refreshing={loading}
          onRefresh={fetchHistory}
          ListEmptyComponent={
            <View style={styles.emptyContainer}>
              <Text style={styles.emptyText}>
                Ch∆∞a c√≥ cu·ªôc tr√≤ chuy·ªán n√†o.{'\n'}
                H√£y g·ª≠i tin nh·∫Øn ƒë·∫ßu ti√™n!
              </Text>
            </View>
          }
          showsVerticalScrollIndicator={false}
        />
      )}
    </KeyboardAvoidingView>
  );
};

export default TextChatScreen;